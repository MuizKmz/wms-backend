// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EpcStatus {
  RECEIVED
  DELIVERED
  INBOUND
  GENERATED
}

// --- Users & Roles ---
model User {
  id              Int       @id @default(autoincrement())
  username        String    @unique @db.VarChar(50)
  email           String    @unique @db.VarChar(100)
  passwordHash    String    @map("password_hash") @db.VarChar(255)
  fullName        String    @map("full_name") @db.VarChar(100)
  phone           String?   @db.VarChar(20)
  roleId          Int       @map("role_id")
  language        String?   @db.VarChar(10)
  profileImageUrl String?   @map("profile_image_url") @db.VarChar(255)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  role              Role          @relation(fields: [roleId], references: [id])
  receivingsCreated Receiving[]   @relation("CreatedBy")
  ordersCreated     Order[]       @relation("CreatedBy")
  auditLogs         AuditLog[]

  @@map("users")
}

model Role {
  id          Int    @id @default(autoincrement())
  name        String @unique @db.VarChar(50)
  permissions Json

  // Relations
  users User[]

  @@map("roles")
}

// --- Warehouses & Storage ---
model Warehouse {
  id           Int       @id @default(autoincrement())
  warehouseCode String   @unique @map("warehouse_code") @db.VarChar(50)
  name         String    @db.VarChar(100)
  address      String?   @db.Text
  manager      String?   @db.VarChar(100)
  contactPhone String?   @map("contact_phone") @db.VarChar(20)
  email        String?   @db.VarChar(100)
  status       String    @db.VarChar(20)
  remark       String?   @db.Text
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  racks      Rack[]
  sections   Section[]
  receivings Receiving[]
  inventory  Inventory[]

  @@map("warehouses")
}

model Rack {
  id          Int     @id @default(autoincrement())
  warehouseId Int     @map("warehouse_id")
  rackCode    String  @unique @map("rack_code") @db.VarChar(50)
  rackName    String  @map("rack_name") @db.VarChar(100)
  rackType    String? @map("rack_type") @db.VarChar(50)
  capacity    Int?
  status      String  @db.VarChar(20)
  remark      String? @db.Text

  // Relations
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  sections  Section[]
  inventory Inventory[]

  @@map("racks")
}

model Section {
  id          Int     @id @default(autoincrement())
  warehouseId Int     @map("warehouse_id")
  rackId      Int     @map("rack_id")
  sectionCode String  @unique @map("section_code") @db.VarChar(50)
  sectionName String  @map("section_name") @db.VarChar(100)
  capacity    Int?
  status      String  @db.VarChar(20)
  remark      String? @db.Text

  // Relations
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  rack      Rack      @relation(fields: [rackId], references: [id])
  inventory Inventory[]

  @@map("sections")
}

// --- Business Partners ---
model Supplier {
  id           Int     @id @default(autoincrement())
  supplierCode String  @unique @map("supplier_code") @db.VarChar(50)
  supplierName String  @map("supplier_name") @db.VarChar(100)
  manager      String? @db.VarChar(100)
  contactPhone String? @map("contact_phone") @db.VarChar(20)
  email        String? @db.VarChar(100)
  status       String  @db.VarChar(20)
  remark       String? @db.Text

  // Relations
  products   Product[]
  receivings Receiving[]
  orders     Order[]

  @@map("suppliers")
}

model Customer {
  id            Int     @id @default(autoincrement())
  customerCode  String  @unique @map("customer_code") @db.VarChar(50)
  customerName  String  @map("customer_name") @db.VarChar(100)
  contactPerson String? @map("contact_person") @db.VarChar(100)
  phone         String? @db.VarChar(20)
  email         String? @db.VarChar(100)
  address       String? @db.Text
  city          String? @db.VarChar(100)
  status        String  @db.VarChar(20)
  remark        String? @db.Text

  // Relations
  orders Order[]

  @@map("customers")
}

// --- Products & Inventory ---
model Category {
  id                  Int     @id @default(autoincrement())
  categoryCode        String  @unique @map("category_code") @db.VarChar(50)
  name                String  @db.VarChar(100)
  parentCategoryId    Int?    @map("parent_category_id")
  level               Int
  storageRequirements String? @map("storage_requirements") @db.Text
  status              String  @db.VarChar(20)

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          Int       @id @default(autoincrement())
  skuCode     String    @unique @map("sku_code") @db.VarChar(50)
  productCode String    @map("product_code") @db.VarChar(50)
  name        String    @db.VarChar(255)
  categoryId  Int       @map("category_id")
  supplierId  Int       @map("supplier_id")
  status      String    @db.VarChar(20)
  remarks     String?   @db.Text
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  category       Category            @relation(fields: [categoryId], references: [id])
  supplier       Supplier            @relation(fields: [supplierId], references: [id])
  certificates   ProductCertificate[]
  epcs           Epc[]
  receivingItems ReceivingItem[]
  orderItems     OrderItem[]
  inventory      Inventory[]

  @@map("products")
}

model ProductCertificate {
  id                 Int    @id @default(autoincrement())
  productId          Int    @map("product_id")
  certificateName    String @map("certificate_name") @db.VarChar(100)
  certificateFileUrl String @map("certificate_file_url") @db.VarChar(255)

  // Relations
  product Product @relation(fields: [productId], references: [id])

  @@map("product_certificates")
}
model CorpCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique @db.VarChar(4)  // Must be 4 hex chars
  label     String?  @db.VarChar(100)
  createdAt DateTime @default(now())

  // Relation
  epcs      Epc[]

  @@map("corp_codes")
}
model Epc {
  id          Int      @id @default(autoincrement())
  epcCode     String   @unique @map("epc_code") @db.VarChar(100)
  productId   Int      @map("product_id")
  corpCodeId  Int       @map("corp_code_id")  // NEW: Link to corp code
  batchName   String?  @map("batch_name") @db.VarChar(100)
  batchNumber Int?     @map("batch_number")
  status      EpcStatus  @default(GENERATED)
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  product Product @relation(fields: [productId], references: [id])
  corpCode  CorpCode  @relation(fields: [corpCodeId], references: [id])  // NEW

  @@map("epcs")
}

// --- Receiving ---
model Receiving {
  id            Int      @id @default(autoincrement())
  receivingCode String   @unique @map("receiving_code") @db.VarChar(50)
  doNumber      String?  @map("do_number") @db.VarChar(50)
  warehouseId   Int      @map("warehouse_id")
  rackId        Int?     @map("rack_id")
  sectionId     Int?     @map("section_id")
  source        String?  @db.VarChar(50)
  supplierId    Int?     @map("supplier_id")
  receivingDate DateTime @map("receiving_date") @db.Date
  receivedBy    String?  @map("received_by") @db.VarChar(100)
  remarks       String?  @db.Text
  createdBy     Int      @map("created_by")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  warehouse      Warehouse       @relation(fields: [warehouseId], references: [id])
  supplier       Supplier?       @relation(fields: [supplierId], references: [id])
  creator        User            @relation("CreatedBy", fields: [createdBy], references: [id])
  receivingItems ReceivingItem[]

  @@map("receivings")
}

model ReceivingItem {
  id          Int    @id @default(autoincrement())
  receivingId Int    @map("receiving_id")
  productId   Int    @map("product_id")
  quantity    Int
  unit        String @db.VarChar(20)

  // Relations
  receiving Receiving @relation(fields: [receivingId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])

  @@map("receiving_items")
}

// --- Orders ---
model Order {
  id                    Int       @id @default(autoincrement())
  orderType             String    @map("order_type") @db.VarChar(10) // 'PO' or 'DO'
  orderNo               String    @unique @map("order_no") @db.VarChar(50)
  customerId            Int?      @map("customer_id")
  supplierId            Int?      @map("supplier_id")
  picName               String?   @map("pic_name") @db.VarChar(100)
  status                String    @db.VarChar(20)
  estimatedDeliveryTime DateTime? @map("estimated_delivery_time")
  remarks               String?   @db.Text
  createdBy             Int       @map("created_by")
  createdAt             DateTime  @default(now()) @map("created_at")

  // Relations
  customer   Customer?   @relation(fields: [customerId], references: [id])
  supplier   Supplier?   @relation(fields: [supplierId], references: [id])
  creator    User        @relation("CreatedBy", fields: [createdBy], references: [id])
  orderItems OrderItem[]
  shipments  Shipment[]

  @@map("orders")
}

model OrderItem {
  id        Int @id @default(autoincrement())
  orderId   Int @map("order_id")
  productId Int @map("product_id")
  quantity  Int
  status   String @default("Pending") @db.VarChar(20) 



  // Relations
  order     Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// --- Inventory ---
model Inventory {
  id            Int      @id @default(autoincrement())
  productId     Int      @map("product_id")
  warehouseId   Int      @map("warehouse_id")
  rackId        Int      @map("rack_id")
  sectionId     Int      @map("section_id")
  quantity      Int
  lastUpdatedAt DateTime @map("last_updated_at")

  // Relations
  product   Product   @relation(fields: [productId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  rack      Rack      @relation(fields: [rackId], references: [id])
  section   Section   @relation(fields: [sectionId], references: [id])

  @@map("inventory")
}

// --- Shipments ---
model Shipment {
  id                    Int       @id @default(autoincrement())
  trackingCode          String    @unique @map("tracking_code") @db.VarChar(100)
  orderId               Int       @map("order_id")
  carrier               String?   @db.VarChar(100)
  shippingDate          DateTime? @map("shipping_date") @db.Date
  estimatedDeliveryDate DateTime? @map("estimated_delivery_date") @db.Date
  destination           String?   @db.Text
  state                 String    @db.VarChar(50)
  remark                String?   @db.Text

  // Relations
  order     Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("shipments")
}

// --- Audit Logs ---
model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  action    String   @db.VarChar(50)
  tableName String   @map("table_name") @db.VarChar(50)
  rowId     Int      @map("row_id")
  diff      Json
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}